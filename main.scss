$clr-primary-400: hsl(206, 33%, 37%);
$clr-primary-500: hsl(206, 33%, 25%);
$clr-secondary-400: hsl(253, 27%, 35%);
$clr-secondary-500: hsl(253, 27%, 20%);
$clr-accent-400: hsl(45, 82%,  65%);
$clr-accent-500: hsl(45, 82%, 45%);

body {
    margin: 4rem;

    /*Nesting can assist auto complete font-size: 1.25rem;*/
    font: {
        size: 1.25rem;
        family: system-ui, sans-serif;
    }
    text-align: center;
}

section {
    padding-block: 3rem;
}

.container {
    width: min(100% - 4rem, 50rem);
    margin-inline: auto;
}

.text-subdued {
    font-size: 1rem;
}

.surface {
    &-primary {
        background-color: $clr-primary-400;

        .text-subdued {
            opacity: 0.8;
        }
    }

    &-secondary {
        background-color: $clr-secondary-400;

        .text-subdued {
            opacity: 0.7;
        }
    }

    &-primary,
    &-secondary {
        color: white;
    }

    &-accent {
        background-color: $clr-accent-400;
        color: black;

        .text-subdued {
            opacity: 0.6;
        }
    }

    &-primary,
    &-secondary,
    &-accent {
        .btn {
            background-color: white;
            color: black;

            &:hover,
            &:focus {
                background-color: inherit;
                color: inherit;
                outline: currentColor 2px solid;
            }
        }
    }
}

.btn {
    display: inline-block;
    padding: 1em 2em;
    cursor: pointer;
    border: 0;
    text-decoration: none;
    text-transform: uppercase;
    color: white;

    &__primary {
        background-color: $clr-primary-400;

        &:hover,
        &:focus {
            background-color: $clr-primary-500;
        }
    }

    &__secondary {
        background-color: $clr-secondary-400;

        &:hover,
        &:focus {
            background-color: $clr-secondary-500;
        }
    }

    &__accent {
        background-color: $clr-accent-400;

        &:hover,
        &:focus {
            background-color: $clr-accent-500;
        }
    }
}

/*
   Nesting simply means putting a new selector within parents declaration

   & is very useful when nesting - #parentSelector

   //Application
   1. Nesting properties
   2. Nesting can create overly specific selectors with high specificity.  if you wouldn't write a selector like that in your CSS, then don't use nesting to create that when writing SCSS.
   3. You can use & parent selector before or after the selector - .text-centered & {}


   NB line-height 1.5 / max-width 45 ch
*/


// Variables

// A variable looks just like a regular property: value pair, with the exception that they don't have to be declared inside of a CSS rule.

/*
Application 
    1. Variables define by variables
    2. Are blocked scoped but one can you the !global
    3. Great for the following
        - Color values
        - Font sizes
        - Spacing values
        - Box shadows
        - Gradients
        - Border radii
*/

// 1.
$clr-dark-gray: #333;
$clr-light-gray: #efefef;

$clr-primary-bg: $clr-dark-gray;
$clr-primary-text: $clr-light-gray;

.body {
    color: $clr-primary-text;
    background: $clr-primary-bg;
}

.header {
    $clr-primary: blue;

    &-nav-link {
        color: $clr-primary;
    }
}

/*
Custom css props are live variables that can be seen by the browser
Sass variables can be seen by the browser
*/

/* Extends */
.bg-dark {
    background: black;
    padding: 1rem;
}

.inverted-colors {
    @extend .bg-dark;
    color: white;
}

/* Is only complied if called*/

%uppercase-bold-text {
    text-transform: uppercase;
    font-weight: bold;
    letter-spacing: 1px;
}

.at {
    @extend %uppercase-bold-text;
}

/*Better way of creating */

$clr-neutral-light: #ededed;
$clr-neutral-dark: #323232;
$clr-warning: orange;
$clr-alert: red;

%tooltip {
    padding: 0.25em;
    background: $clr-neutral-light;
    color: $clr-neutral-dark;
}

.tooltip {
    &-warning {
        @extend %tooltip;
        border: 2px solid $clr-warning;
    }

    &-alert {
        @extend %tooltip;
        border: 2px solid $clr-alert;
    }
}

@mixin uppercase-bold-text {
    text-transform: uppercase;
    font-weight: bold;
    letter-spacing: 1px;
}

.acct {
    color: limegreen;
    @include uppercase-bold-text();
}

@mixin invertedColors {
    color: white;
    background: black;

    a {
        color: yellow;
    }

    &__title {
        font-size: 2.5rem;
        color: #f07178;
    }
}

.call-to-action {
    @include invertedColors();
}

@mixin button($bg) {
    background-color: $bg;
    padding: 0.5rem 1rem;
    text-transform: uppercase;
    font-weight: 700;
}

.btn--accent {
    @include button($bg: #fff);
}

@mixin linear-gradient($deg: -45deg, $clr-1: red, $clr-2: violet) {
    background-image: linear-gradient($deg, $clr-1, $clr-2);
}

.hero {
    @include linear-gradient();
}

$color-pri: red;
$color-sec: black;
$color-tri: blue;
$bg: background-color;

@mixin aspect-ratio {
    aspect-ratio: 1 / 1;
}

.#{"" + $color-pri} {
    color: $color-pri;
    #{$bg}: $color-sec;
}

// $width: 100;

// .width-#{$width * 2} {
//     width: $width * 2px;
// }

// .box-#{"" + $color-pri}-#{$width} {
//     #{$bg}: $color-pri;
//     width: #{$width}px;
//     @include aspect-ratio;
// }

// .box-#{"" + $color-sec}-#{$width + 50} {
//     #{$bg}: $color-sec;
//     width: #{$width + 50}px;
//     @include aspect-ratio;
// }

// .box-#{"" + $color-tri}-#{$width + 100} {
//     #{$bg}: $color-tri;
//     width: #{$width + 100}px;
//     @include aspect-ratio;
// }

@mixin box($clr, $multiplier: 1) {
    $width: 100;

    &-#{"" + $clr}-#{$width * $multiplier} {
        background-color: $clr;
        width: #{$width * $multiplier}px;
        aspect-ratio: 1 / 1;
    }
}

.box {
    @include box($color-pri, 1);
}

.box {
    @include box($color-sec, 1.5);
}

.box {
    @include box($color-tri, 2)
}