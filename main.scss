@use "sass:color";
@use "sass:map";

$clr-primary-400: hsl(206, 33%, 37%);
$clr-primary-500: hsl(206, 33%, 25%);
$clr-secondary-400: hsl(253, 27%, 35%);
$clr-secondary-500: hsl(253, 27%, 20%);
$clr-accent-400: hsl(45, 82%, 65%);
$clr-accent-500: hsl(45, 82%, 45%);

body {
    margin: 4rem;

    /*Nesting can assist auto complete font-size: 1.25rem;*/
    font: {
        size: 1.25rem;
        family: system-ui, sans-serif;
    }

    text-align: center;
}

section {
    padding-block: 3rem;
}

.container {
    width: min(100% - 4rem, 50rem);
    margin-inline: auto;
}

.text-subdued {
    font-size: 1rem;
}

.surface {
    &-primary {
        background-color: $clr-primary-400;

        .text-subdued {
            opacity: 0.8;
        }
    }

    &-secondary {
        background-color: $clr-secondary-400;

        .text-subdued {
            opacity: 0.7;
        }
    }

    &-primary,
    &-secondary {
        color: white;
    }

    &-accent {
        background-color: $clr-accent-400;
        color: black;

        .text-subdued {
            opacity: 0.6;
        }
    }

    &-primary,
    &-secondary,
    &-accent {
        .btn {
            background-color: white;
            color: black;

            &:hover,
            &:focus {
                background-color: inherit;
                color: inherit;
                outline: currentColor 2px solid;
            }
        }
    }
}

.btn {
    display: inline-block;
    padding: 1em 2em;
    cursor: pointer;
    border: 0;
    text-decoration: none;
    text-transform: uppercase;
    color: white;

    &__primary {
        background-color: $clr-primary-400;

        &:hover,
        &:focus {
            background-color: $clr-primary-500;
        }
    }

    &__secondary {
        background-color: $clr-secondary-400;

        &:hover,
        &:focus {
            background-color: $clr-secondary-500;
        }
    }

    &__accent {
        background-color: $clr-accent-400;

        &:hover,
        &:focus {
            background-color: $clr-accent-500;
        }
    }
}

/*
   Nesting simply means putting a new selector within parents declaration

   & is very useful when nesting - #parentSelector

   //Application
   1. Nesting properties
   2. Nesting can create overly specific selectors with high specificity.  if you wouldn't write a selector like that in your CSS, then don't use nesting to create that when writing SCSS.
   3. You can use & parent selector before or after the selector - .text-centered & {}


   NB line-height 1.5 / max-width 45 ch
*/


// Variables

// A variable looks just like a regular property: value pair, with the exception that they don't have to be declared inside of a CSS rule.

/*
Application 
    1. Variables define by variables
    2. Are blocked scoped but one can you the !global
    3. Great for the following
        - Color values
        - Font sizes
        - Spacing values
        - Box shadows
        - Gradients
        - Border radii
*/

// 1.
$clr-dark-gray: #333;
$clr-light-gray: #efefef;

$clr-primary-bg: $clr-dark-gray;
$clr-primary-text: $clr-light-gray;

.body {
    color: $clr-primary-text;
    background: $clr-primary-bg;
}

.header {
    $clr-primary: blue;

    &-nav-link {
        color: $clr-primary;
    }
}

/*
Custom css props are live variables that can be seen by the browser
Sass variables can be seen by the browser
*/

/* Extends */
.bg-dark {
    background: black;
    padding: 1rem;
}

.inverted-colors {
    @extend .bg-dark;
    color: white;
}

/* Is only complied if called*/

%uppercase-bold-text {
    text-transform: uppercase;
    font-weight: bold;
    letter-spacing: 1px;
}

.at {
    @extend %uppercase-bold-text;
}

/*Better way of creating */

$clr-neutral-light: #ededed;
$clr-neutral-dark: #323232;
$clr-warning: orange;
$clr-alert: red;

%tooltip {
    padding: 0.25em;
    background: $clr-neutral-light;
    color: $clr-neutral-dark;
}

.tooltip {
    &-warning {
        @extend %tooltip;
        border: 2px solid $clr-warning;
    }

    &-alert {
        @extend %tooltip;
        border: 2px solid $clr-alert;
    }
}

@mixin uppercase-bold-text {
    text-transform: uppercase;
    font-weight: bold;
    letter-spacing: 1px;
}

.acct {
    color: limegreen;
    @include uppercase-bold-text();
}

@mixin invertedColors {
    color: white;
    background: black;

    a {
        color: yellow;
    }

    &__title {
        font-size: 2.5rem;
        color: #f07178;
    }
}

.call-to-action {
    @include invertedColors();
}

@mixin button($bg) {
    background-color: $bg;
    padding: 0.5rem 1rem;
    text-transform: uppercase;
    font-weight: 700;
}

.btn--accent {
    @include button($bg: #fff);
}

@mixin linear-gradient($deg: -45deg, $clr-1: red, $clr-2: violet) {
    background-image: linear-gradient($deg, $clr-1, $clr-2);
}

.hero {
    @include linear-gradient();
}

$color-pri: red;
$color-sec: black;
$color-tri: blue;
$bg: background-color;

@mixin aspect-ratio {
    aspect-ratio: 1 / 1;
}

.#{"" + $color-pri} {
    color: $color-pri;
    #{$bg}: $color-sec;
}

// $width: 100;

// .width-#{$width * 2} {
//     width: $width * 2px;
// }

// .box-#{"" + $color-pri}-#{$width} {
//     #{$bg}: $color-pri;
//     width: #{$width}px;
//     @include aspect-ratio;
// }

// .box-#{"" + $color-sec}-#{$width + 50} {
//     #{$bg}: $color-sec;
//     width: #{$width + 50}px;
//     @include aspect-ratio;
// }

// .box-#{"" + $color-tri}-#{$width + 100} {
//     #{$bg}: $color-tri;
//     width: #{$width + 100}px;
//     @include aspect-ratio;
// }

@mixin box($clr, $multiplier: 1) {
    $width: 100;

    &-#{"" + $clr}-#{$width * $multiplier} {
        background-color: $clr;
        width: #{$width * $multiplier}px;
        aspect-ratio: 1 / 1;
    }
}

.box {
    @include box($color-pri, 1);
}

.box {
    @include box($color-sec, 1.5);
}

.box {
    @include box($color-tri, 2)
}



$clr-accent: #23ef91;
$clr-neutral-100: #e7e7de;

.bg-accent {
    background-color: $clr-accent;
}

.bg-accent-light {
    background-color: color.scale($clr-accent, $lightness: 70%);
}

.bg-accent-dark {
    background-color: color.scale($clr-accent, $lightness: -50%);
}

.title {
    $clr-primary: #223345;
    color: $clr-primary;
    border: 3px solid;
    border-color: color.complement($clr-primary);
}

$clr-one: #ff1100;
$clr-two: #0011ff;

.new-color {
    // use a built-in function to mix the two colors into a new color 
    color: color.mix($clr-one, $clr-two);
}

// Starting var, Starting no, Ending number
// to is zero based  will go up to, but not include that final number.
// through is indexed based - will go up to, and include that number
@for $i from 1 to 4 {
    .example {
        width: $i;
    }
}

$total-columns: 12;

@for $column-count from 1 through $total-columns {
    .col-#{"" + $column-count} {
        flex-basis: calc(100% / $total-columns) * $column-count;
    }
}

$clr-primary: #2553db;
$clr-steps: 10;

@for $step from 0 through $clr-steps {
    .clr-primary-#{"" + $step} {
        color: color.scale($clr-primary, $lightness: $step * 10%);
    }
}

// Perfect for lists
// And we can store them
$clrs: red, blue, green;

@each $color in $clrs {
    .#{"" + $color} {
        color: $color;
    }
}

$font-colors: (
    primary,
    #ff0000),
    (secondary, #00ff00),
    (tertiary, #0000ff
);

@each $name, $clr in $font-colors {
    .#{$name} {
        color: $clr;
    }
}

// EXpression that produce truthy values to be combined
@if (1==1) {
    body {
        background: blue;
    }
}

@if (1==2) {
    body {
        background: red;
    }
}

@if (1 > 2 and 1==2 or 2 < 3) {
    //Expression that evaluate value
}

// $colors: 
//     (primary, #4287f5),
//     (secondary, #3a128a),
//     (accent, #f59c42
// );

// @each $name, $color in $colors {
    
//         .clr-#{$name} {
//             background: $color;
            
//             @if(color.lightness($color) < 50%) {
//                 color: white;
//             }

//             @if(color.lightness($color) > 50%) {
//                 color: black;
//             }
//         }
// }

@mixin border($side: 'all', $color: #dedede, $width: 1px, $style: solid) {
    @if ($side == 'all') {
        border: $color $width $style;
    } @else {
        border-#{$side}: $color $width $style;
    }
}

.tag {
    @include border(left);
}

.call-to-action {
    @include border(right, $width: 5px)
}

@mixin uppercase($font-size: 1rem) {
    text-transform: uppercase;

    @if ($font-size < 2rem) {
        line-height: 1.3;
    } @else if ($font-size >= 2rem and $font-size < 3rem) {
        line-height: 1.2;
    } @else {
        line-height: 1.1;
    }
}

h1 {
    @include uppercase(6rem)
}

h2 {
    @include uppercase(4rem)
}

h3 {
    @include uppercase(2.5rem)
}

$colors: (
    primary,
    #4287f5),
    (secondary, #3a128a),
    (accent, #f59c42
);

@each $name, $color in $colors {
    .clr-#{$name} {
        background-color: $color;
        color: if(color.lightness($color) < 50, white, black);
    }
}

// @mixin ui-component($size, $color, $bg, $hover-color: $color, $hover-bg: $bg) {
//     display: inline-block;
//     padding: $size ($size * 3);
//     color: $color;
//     background-color: $bg;

//     &:hover,
//     &:focus {
//         color: $hover-color;
//         background-color: $hover-bg;
//     }
// }

@mixin ui-component($size, $color, $bg, $hover: true, $hover-color: $color, $hover-bg: $bg) {
    display: inline-block;
    padding: $size ($size * 3);
    color: $color;
    background-color: $bg;
    @if $hover {
        &:hover,
        &:focus {
            color: $hover-color;
            background-color: $hover-color;
        }
    }
}

.button {
    @include ui-component(1em, white, black, black, black, white)
}

.badge {
    @include ui-component(0.25em, red, blue, $hover: false)
}


@function add($numbers...) {
    $total: 0;

    @each $number in $numbers {
        $total: $total + $number
    }

    @return $total
}

body {
    width: add(100, 1000px, 200, 900);
}

@mixin linear-gradient ($cl-1, $cl-2, $deg: -45deg) {
    background-image: linear-gradient($deg, $cl-1, $cl-2);
}

$clr-neutral-900: #000;
$clr-neutral-800: #222;
$clr-neutral-700: #343434;
$clr-neutral-300: #cdcdcd;
$clr-neutral-200: #ededed;
$clr-neutral-100: #fff;

$cl-primary: dodgerblue;
$cl-secondary: steelblue;
$cl-accent: firebrick;

$default-scheme: $clr-neutral-200, $clr-neutral-700;

@mixin color-scheme($bg, $text) {
    background-color: $bg;
    color: $text;
}

body {
    @include color-scheme($default-scheme...);
}

$bp-small: 35em;
$bp-medium: 55em;
$bp-large: 70em;

@mixin mq($breakpoint) {
    @media screen and (min-width: $breakpoint) {
        @content;
    }
}

body {
    font-size: 1rem;

    @include mq($bp-medium) {
        font-size: 1rem;
    }
}

// "sass:map"

// $my-map-name: (
//     "key-1": value,
//     "key-2": value-1,
//     "key-3": value-3
// )


$colors: (
    primary: (
        light: lightblue,
        normal: blue,
        dark: darkblue
    ),
    secondary: (
        light: pink,
        normal: red,
        dark: firebrick
    )
);

// $sc: primary, dark;

// @function clr($color) {
//     @return map.get($colors, $color);
// }

// body {
//     color: clr($sc);
// }


// A simple list
$shadow: 0 0 1rem rgb(black, 0.2);

// Nested list
$shadows: 
    (0 0 1rem rgb(black, 0.2)),
    (0 0 1.5rem rgb(black, 0.15)),
    (0 0 2rem rgb(black, 0.1));

// $my-map-name: (
//     "key-1": value,
//     "key-2": value-2,
//     "key-3": value-3
// )

$font-sizes: (
    400: 1.125rem,
    500: 1.25rem,
    600: 1.5rem,
    700: 2rem
);

body {
    font-style: map.get($font-sizes, 400);
}

$breakpoint: (
    small: 30em,
    medium: 45em,
    large: 65em,
    xl: 80em
);

$colors: (
    'primary': #1b6db5,
    'secondary': #4a1ab0,
    'accent': #d97614,
);

@function clr($color) {
    @if (map.get($colors, $color) != $color) {
        @return map.get($colors, $color);
    }
}

.example {
    color: clr(primary);
}

$crs: (
    primary: (
        light: lightblue,
        normal: blue,
        dark: darkblue
    ),
    secondary: (
        light: pink,
        normal: red,
        dark: firebrick
    )
);

.example {
    color: map.get($crs, primary, dark);
}

$fs: (
    400: 1.125rem,
    500: 1.25rem,
    600: 1.525rem,
    700: 2.25rem
);

@each $name, $size in $fs {
    .fs-#{$name} {
        font-size: $size;
    }
}

$cs: (
    primary: (
        light: lightblue,
        normal: blue,
        dark: darkblue
    ),
    secondary: (
        light: pink,
        normal: red,
        dark: firebrick
    )
);

@each $color, $shades in $cs {
    @each $shade, $value in $shades {
        // @debug $shade;
        // @debug $value;
        .bg-#{$color}-#{$shade} {
            background-color: $value;
            color: if(color.lightness($value) < 50, white, black);
        }
    }
}